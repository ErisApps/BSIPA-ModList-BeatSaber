<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="Newtonsoft.Json.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.String" name="SolutionDir" #>
<#@ parameter type="System.String" name="ManifestPath" #>

<#
    var solutionDir = SolutionDir ?? "$(SolutionDir)";
    var currentTime = DateTime.Now;

    const int copyrightYearStart = 2020;
    var copyrightYearEnd = currentTime.Year;
    var copyrightString = $"{copyrightYearStart}" + (copyrightYearStart != copyrightYearEnd ? $"-{copyrightYearEnd}" : "");

    var manifestPath = ManifestPath ?? Host.ResolvePath("manifest.json");
    var manifest = JsonConvert.DeserializeObject<Manifest>(File.ReadAllText(manifestPath));
#>

using System;

namespace IPA.ModList.BeatSaber
{
    internal static class CompileConstants
    {
        public const string AssemblyName = "IPA.ModList.BeatSaber";
        public const string SolutionDirectory = "<#= solutionDir.Replace("\\", "\\\\") #>";
        public const string CopyrightDate = "<#= copyrightString #>";
        public const string CopyrightString = "Copyright © " + Author + " " + CopyrightDate;

        public const string Author = Manifest.Author;
        public const string Version = Manifest.Version;

        public const int BuildYear = <#= currentTime.Year #>;
        public const int BuildMonth = <#= currentTime.Month #>;
        public const int BuildDay = <#= currentTime.Day #>;

        public static DateTime BuildDate => new DateTime(BuildYear, BuildMonth, BuildDay);

        public static class Manifest
        {
            <#
                foreach (var field in typeof(Manifest).GetFields())
                { #>
            public const <#= field.FieldType.FullName #> <#= field.Name #> = <#
                    if (field.FieldType == typeof(string))
                    { #> 
                        "<#= field.GetValue(manifest).ToString().Replace("\\", "\\\\") #>";
                    <# }
                    else
                    { #>
                        <#= field.GetValue(manifest).ToString() #>;
                    <# }
                }
            #>
        }
    }
}

<#+
    public class Manifest 
    {
        [JsonProperty("name")]
        public string Name;
        [JsonProperty("author")]
        public string Author;
        [JsonProperty("version")]
        public string Version;
    }
#>